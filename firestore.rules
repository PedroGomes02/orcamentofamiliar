rules_version = '2';
service cloud.firestore {
  match /databases/{document}/documents {
    
    match /{document=**} {
    	allow read, write: if false;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId && exists(request.resource.data.userId);
    }
    
    match /users/{userId}/{collection}/{document} {
      allow read, write: if request.auth != null && userId == request.auth.uid;
      allow create: if request.auth != null && userId == request.auth.uid && request.resource.data.userId == request.auth.uid && exists(request.resource.data.userId);
    }
    
		// match /groups/{groupId}/{collection}/{document} {
		// allow read: if request.auth != null && exists (/databases/$(document)/documents/groups/$(groupId)/members/$(request.auth.uid))
		//  	allow write: if request.auth != null && groupId == request.auth.uid
		// }
    
    //Auth to Create New Group
    match /{document} {
    	allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId && exists(request.resource.data.userId);
    }
    
    //Group creator rules
    match /groups/{group} {
		 	allow read, write: if request.auth != null && group == request.auth.token.email
    }
    
    match /groups/{group}/{collection}/{document} {
		 	allow read, write: if request.auth != null && group == request.auth.token.email
    }
    
    //Group member rules
     match /groups/{group} {
		 	allow read: if request.auth != null && exists (/databases/$(document)/documents/groups/$(group)/members/$(request.auth.token.email))
    }
    
    match /groups/{group}/{collection}/{document} {
		 	allow read: if request.auth != null && exists (/databases/$(document)/documents/groups/$(group)/members/$(request.auth.token.email))
    }
    
    match /groups/{group}/movements/{document} {
 		 	allow write: if request.auth != null && exists (/databases/$(document)/documents/groups/$(group)/members/$(request.auth.token.email))
    }
    
   }

  
}